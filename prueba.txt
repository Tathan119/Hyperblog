algo 
guarde
tenemos una nueva prueba

guardada


esta es un prueba de la tercera versión

tenemos una prueba de texto de vida y obra

quiero ser un desarrollador web

>>>Como usar git<<<

inicio y configuracion de git

    git init
    
    git config
    git config --list
    git config --list --show-origin
    git config --global user.name "Jonathan Sanchez"
    git config --global user.email "jonathanjass@gmail.com"

uso de git

    git status
    git add
    git commit -m ""
    git commit -am "" // hace el comit y el add al tiempo
    git push // para enviar del repositorio local al repositorio remoto 
    git fetch //trae del repositorio remoto al local
              // pero no lo copea en el unstage o directorio de trabajo- la carpeta pues
    git merge //fusiona el commit que se trajo del repositorio remoto al local
    git pull // hace lo de fetch y merge al tiempo
        
    git clone url_del_servidor_remoto //Nos permite descargar los archivos de la última 
                                        versión de la rama principal y todo el historial 
                                        de cambios en la carpeta .git.
    
    git branch  // verifica los nombres de las ramas del proyecto
    git branch [nobre de rama] // crea ramas del proyecto
    git log //historial del repositirio o commit
    git log --stat //historial del repositirio o commit con los cambios nuevos

    git show [id] [archivo] // muestra los cambios realizados en el commit
    git diff [id-antiguo] [id-reciente] [archivo] // compara las vesiones del archivo
    git checkout [id] [archivo]     // deja abrir los archivos desde las 
    git checkout [branch o rama]    versiones en el repositorio, tambien permite el ambio 
                                    de ramas par ubicarnos desde el HEAD

    git rm --cached // Elimina los archivos del área de Staging y del 
                    // próximo commit pero los mantiene en nuestro disco duro.
    git rm --force  // Elimina los archivos de Git y del disco duro. pero queda
                    // en el registro de git

    git reset --soft // Borramos todo el historial y los registros de Git pero 
                     // guardamos los cambios que tengamos en Staging, así podemos 
                     // aplicar las últimas actualizaciones a un nuevo commit.
                     
    git reset --hard // borra todo

    git reset HEAD  // Saca los archivos del área de Staging al unstage

 
A la espera de mas comandos







Algunos comandos que pueden ayudar cuando colaboren con proyectos muy grandes de github:

    git log --oneline - Te muestra el id commit y el título del commit.
    git log --decorate- Te muestra donde se encuentra el head point en el log.
    git log --stat - Explica el número de líneas que se cambiaron brevemente.
    git log -p- Explica el número de líneas que se cambiaron y te muestra que se cambió en el contenido.
    git shortlog - Indica que commits ha realizado un usuario, mostrando el usuario y el titulo de sus commits.
    git log --graph --oneline --decorate y
    git log --pretty=format:"%cn hizo un commit %h el dia %cd" - Muestra mensajes personalizados de los commits.
    git log -3 - Limitamos el número de commits.
    git log --after=“2018-1-2” ,
    git log --after=“today” y
    git log --after=“2018-1-2” --before=“today” - Commits para localizar por fechas.
    git log --author=“Name Author” - Commits realizados por autor que cumplan exactamente con el nombre.
    git log --grep=“INVIE” - Busca los commits que cumplan tal cual está escrito entre las comillas.
    git log --grep=“INVIE” –i- Busca los commits que cumplan sin importar mayúsculas o minúsculas.
    git log – index.html- Busca los commits en un archivo en específico.
    git log -S “Por contenido”- Buscar los commits con el contenido dentro del archivo.
    git log > log.txt - guardar los logs en un archivo txt

backup